{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","auth","require","data","default","TodoList","props","state","tasks","task","this","concat","setState","alert","slice","splice","indexOf","loadSolidTasks","oldTasks","saveSolidTasks","className","addNewTask","handleNewTask","TaskList","deleteTask","handleDeleteTask","loadFromSolid","saveToSolid","React","Component","InputTask","value","handleChange","bind","handleSubmit","event","target","preventDefault","onSubmit","type","name","onChange","map","t","key","onClick","SolidStorage","a","async","getCurrentSession","session","url","webId","replace","todo","schema_itemListElement","push","toString","Array","from","values","delete","add","currentSession","popupLogin","popupUri","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f2951ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nconst auth = require('solid-auth-client');\r\nconst { default: data } = require('@solid/query-ldflex');\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n          <h1>ToDo List</h1>\r\n      </header>\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nclass TodoList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tasks: [],\r\n    }\r\n  }\r\n\r\n  handleNewTask(task) {\r\n    if(task === \"\") {\r\n      alert(\"Empty task not allowed!\");\r\n      return;\r\n    }\r\n    const tasks = this.state.tasks.concat(task);\r\n    this.setState({tasks});\r\n  }\r\n\r\n  handleDeleteTask(task) {\r\n    const tasks = this.state.tasks.slice();\r\n    tasks.splice(tasks.indexOf(task), 1);\r\n    this.setState({tasks});\r\n  }\r\n\r\n  async loadFromSolid() {\r\n    let tasks = await loadSolidTasks();\r\n    this.setState({tasks});\r\n  }\r\n\r\n  async saveToSolid() {\r\n    let oldTasks = await loadSolidTasks();\r\n    saveSolidTasks(this.state.tasks, oldTasks);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App-content\">\r\n        <InputTask addNewTask={(task) => this.handleNewTask(task)}/>\r\n        <TaskList tasks={this.state.tasks} deleteTask={(task) => this.handleDeleteTask(task)}/>\r\n        <SolidStorage loadFromSolid={() => this.loadFromSolid()} saveToSolid={() => this.saveToSolid()}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass InputTask extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    this.props.addNewTask(this.state.value);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input type=\"text\" name=\"task\" value={this.state.value} onChange={this.handleChange} />\r\n        <input type=\"submit\" value=\"+\" />\r\n      </form>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nfunction TaskList(props) {\r\n  return (\r\n    props.tasks.map(t => {\r\n      return (\r\n        <li key={t}>\r\n          {t}<button onClick={() => props.deleteTask(t)}>-</button>\r\n        </li>\r\n      );\r\n    })\r\n  );\r\n}\r\n\r\nclass SolidStorage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={() => this.props.loadFromSolid()}>Load from Solid</button>\r\n        <button onClick={() => this.props.saveToSolid()}>Save to Solid</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nasync function loadSolidTasks() {\r\n  let session = await getCurrentSession();\r\n  let url = session.webId.replace(\"profile/card#me\", \"todo/todo.ttl#todo\");\r\n  let todo = data[url];\r\n  const tasks = [];\r\n  for await (const task of todo.schema_itemListElement) {\r\n    tasks.push(task.toString());\r\n  }\r\n  return Array.from(tasks.values());\r\n}\r\n\r\nasync function saveSolidTasks(tasks, oldTasks) {\r\n  let session = await getCurrentSession();\r\n  let url = session.webId.replace(\"profile/card#me\", \"todo/todo.ttl#todo\");\r\n  let todo = data[url];\r\n  for(const t of oldTasks) {\r\n    await todo[\"schema:itemListElement\"].delete(t.toString());\r\n  }\r\n  for(const t of tasks) {\r\n    await todo[\"schema:itemListElement\"].add(t.toString());\r\n  }\r\n  alert(\"Saved to your Solid POD\");\r\n}\r\n\r\nasync function getCurrentSession() {\r\n  let session = await auth.currentSession();\r\n  let popupUri = 'https://solid.community/common/popup.html';\r\n  if(!session) {\r\n    session = await auth.popupLogin({ popupUri });\r\n  }\r\n  return session;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}